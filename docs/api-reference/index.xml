<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Api Reference on</title><link>https://docs.jitsuin.com/docs/api-reference/</link><description>Recent content in Api Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Wed, 09 Jun 2021 10:19:37 +0100</lastBuildDate><atom:link href="https://docs.jitsuin.com/docs/api-reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Assets API</title><link>https://docs.jitsuin.com/docs/api-reference/assets-api/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/assets-api/</guid><description>Asset API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io Asset Record Creation Define the asset parameters and store in /path/to/jsonfile:
{ &amp;#34;behaviours&amp;#34;: [&amp;#34;RecordEvidence&amp;#34;, &amp;#34;Attachments&amp;#34;], &amp;#34;attributes&amp;#34;: { &amp;#34;arc_firmware_version&amp;#34;: &amp;#34;1.0&amp;#34;, &amp;#34;arc_serial_number&amp;#34;: &amp;#34;vtl-x4-07&amp;#34;, &amp;#34;arc_display_name&amp;#34;: &amp;#34;tcl.ppj.003&amp;#34;, &amp;#34;arc_description&amp;#34;: &amp;#34;Traffic flow control light at A603 North East&amp;#34;, &amp;#34;arc_home_location_identity&amp;#34;: &amp;#34;locations/115340cf-f39e-4d43-a2ee-8017d672c6c6&amp;#34;, &amp;#34;arc_display_type&amp;#34;: &amp;#34;Traffic light with violation camera&amp;#34;, &amp;#34;some_custom_attribute&amp;#34;: &amp;#34;value&amp;#34;, &amp;#34;arc_attachments&amp;#34;: [ { &amp;#34;arc_display_name&amp;#34;: &amp;#34;arc_primary_image&amp;#34;, &amp;#34;arc_attachment_identity&amp;#34;: &amp;#34;blobs/87b1a84c-1c6f-442b-923e-a97516f4d275&amp;#34;, &amp;#34;arc_hash_alg&amp;#34;: &amp;#34;SHA256&amp;#34;, &amp;#34;arc_hash_value&amp;#34;: &amp;#34;246c316e2cd6971ce5c83a3e61f9880fa6e2f14ae2976ee03500eb282fd03a60&amp;#34; } ] } } Create the asset:</description></item><item><title>Attachments API</title><link>https://docs.jitsuin.com/docs/api-reference/attachments-api/</link><pubDate>Wed, 09 Jun 2021 12:05:02 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/attachments-api/</guid><description>Attachment API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io Retrieve a Specific Attachment on an Asset curl -v \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ $URL/archivist/v2/attachments/assets/c04d5ecf-02e0-4be2-a014-ffbbf0e8ddeb/08838336-c357-460d-902a-3aba9528dd22 Retrieve a Specific Attachment on an Event curl -v \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ $URL/archivist/v2/attachments/assets/c04d5ecf-02e0-4be2-a014-ffbbf0e8ddeb/events/de834094-f6c3-4e38-9b37-8c61dea312c9/08838336-c357-460d-902a-3aba9528dd22 Retrieve Information about a specific Attachment It’s also possible to retrieve information about specific attachment using this API.</description></item><item><title>Blobs API</title><link>https://docs.jitsuin.com/docs/api-reference/blobs-api/</link><pubDate>Wed, 09 Jun 2021 13:32:57 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/blobs-api/</guid><description>Blob API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io Upload a Blob Upload the blob stored at /path/to/file:
curl -v -X POST \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ -H &amp;#34;content_type=image/jpg&amp;#34; \ -F &amp;#34;file=@/path/to/file&amp;#34; \ $URL/archivist/v1/blobs The response is:
{ &amp;#34;identity&amp;#34;: &amp;#34;blobs/08838336-c357-460d-902a-3aba9528dd22&amp;#34;, &amp;#34;hash&amp;#34;: { &amp;#34;alg&amp;#34;: &amp;#34;SHA256&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;xxxxxxxxxxxxxxxxxxxxxxx&amp;#34; }, &amp;#34;mime_type&amp;#34;: &amp;#34;image/jpeg&amp;#34;, &amp;#34;timestamp_accepted&amp;#34;: &amp;#34;2019-11-07T15:31:49Z&amp;#34;, &amp;#34;size&amp;#34;: 31424 } Retrieve a Blob Retrieve a specific Attachment</description></item><item><title>Blockchain API (v1alpha1)</title><link>https://docs.jitsuin.com/docs/api-reference/blockchain-api/</link><pubDate>Wed, 09 Jun 2021 13:57:04 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/blockchain-api/</guid><description>Blockchain API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io Fetch Transactions for an event (v1alpha1) Blockchain transactions in Jitsuin are available from the blockchain endpoint using the asset&amp;rsquo;s Event ID as a parameter:
assets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000 To fetch all transactions for an asset event GET the blockchain resource:
curl -v -X GET \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ $URL/archivist/v1alpha1/blockchain/assets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b3 Each of these calls returns a list of matching blockchain transactions in the form:</description></item><item><title>Compliance API</title><link>https://docs.jitsuin.com/docs/api-reference/compliance-api/</link><pubDate>Wed, 09 Jun 2021 12:07:13 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/compliance-api/</guid><description>Compliance API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io Types of Compliance Policies Compliance Posture is measured against user-defined rule sets called Compliance Policies.
Compliance policies are created once and then Assets can be tested against them at any point in time.
For instance, a policy might state that “Maintenance Alarm Events must be answered with a Maintenance Report Event recorded in 72 hours”.</description></item><item><title>Events API</title><link>https://docs.jitsuin.com/docs/api-reference/events-api/</link><pubDate>Wed, 09 Jun 2021 11:48:40 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/events-api/</guid><description>Attachments Behaviour The following operations assume that an attachment has been uploaded to RKVST node using the Blob API.
This attachment uuid is generically referred to as:
blobs/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx Each attachment has an associated hash value and the name of tha hash algorithm used.
Attachments API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io Define the event parameters and store in /path/to/jsonfile:</description></item><item><title>IAM Policies API</title><link>https://docs.jitsuin.com/docs/api-reference/iam-policies-api/</link><pubDate>Wed, 09 Jun 2021 12:02:15 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/iam-policies-api/</guid><description>IAM Policies API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io IAM Policy Creation Define the access_policies parameters and store in /path/to/jsonfile:
{ &amp;#34;display_name&amp;#34;: &amp;#34;Friendly name of the policy&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Description of the policy&amp;#34;, &amp;#34;filters&amp;#34;: [ { &amp;#34;or&amp;#34;: [ &amp;#34;attributes.arc_home_location_identity=locations/5ea815f0-4de1-4a84-9377-701e880fe8ae&amp;#34;, &amp;#34;attributes.arc_home_location_identity=locations/27eed70b-9e2b-4db1-b8c4-e36505350dcc&amp;#34; ]}, { &amp;#34;or&amp;#34;: [ &amp;#34;attributes.arc_display_type=Valve&amp;#34;, &amp;#34;attributes.arc_display_type=Pump&amp;#34; ]}, { &amp;#34;or&amp;#34;: [ &amp;#34;attributes.ext_vendor_name=SynsationIndustries&amp;#34; ]} ], &amp;#34;access_permissions&amp;#34;: [ { &amp;#34;asset_attributes_read&amp;#34;: [ &amp;#34;toner_colour&amp;#34;, &amp;#34;toner_type&amp;#34; ], &amp;#34;asset_attributes_write&amp;#34;:[&amp;#34;toner_colour&amp;#34;], &amp;#34;behaviours&amp;#34;: [ &amp;#34;Attachments&amp;#34;, &amp;#34;Firmware&amp;#34;, &amp;#34;Maintenance&amp;#34;, &amp;#34;RecordEvidence&amp;#34; ], &amp;#34;event_arc_display_type_read&amp;#34;: [&amp;#34;toner_type&amp;#34;, &amp;#34;toner_colour&amp;#34;], &amp;#34;event_arc_display_type_write&amp;#34;: [&amp;#34;toner_replacement&amp;#34;], &amp;#34;include_attributes&amp;#34;: [ &amp;#34;arc_display_name&amp;#34;, &amp;#34;arc_display_type&amp;#34;, &amp;#34;arc_firmware_version&amp;#34; ], &amp;#34;subjects&amp;#34;: [ &amp;#34;subjects/6a951b62-0a26-4c22-a886-1082297b063b&amp;#34;, &amp;#34;subjects/a24306e5-dc06-41ba-a7d6-2b6b3e1df48d&amp;#34; ], &amp;#34;user_attributes&amp;#34;: [ {&amp;#34;or&amp;#34;: [&amp;#34;group:maintainers&amp;#34;, &amp;#34;group:supervisors&amp;#34;]} ] } ] } Create the access policy:</description></item><item><title>Locations API</title><link>https://docs.jitsuin.com/docs/api-reference/locations-api/</link><pubDate>Wed, 09 Jun 2021 11:56:23 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/locations-api/</guid><description>Locations API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io Location Creation Define the location parameters and store in /path/to/jsonfile:
{ &amp;#34;display_name&amp;#34;: &amp;#34;Macclesfield, Cheshire&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Manufacturing site, North West England, Macclesfield, Cheshire&amp;#34;, &amp;#34;latitude&amp;#34;: 53.2546799, &amp;#34;longitude&amp;#34;: -2.1213956, &amp;#34;attributes&amp;#34;: { &amp;#34;director&amp;#34;: &amp;#34;John Smith&amp;#34;, &amp;#34;address&amp;#34;: &amp;#34;Unit 6A, Synsation Park, Maccelsfield&amp;#34;, &amp;#34;Facility Type&amp;#34;: &amp;#34;Manufacture&amp;#34;, &amp;#34;support_email&amp;#34;: &amp;#34;support@macclesfield.com&amp;#34;, &amp;#34;support_phone&amp;#34;: &amp;#34;123 456 789&amp;#34; } } Create the location to POSTing to the locations resource:</description></item><item><title>Microsoft IoTHub API</title><link>https://docs.jitsuin.com/docs/api-reference/microsoft-iothub-api/</link><pubDate>Wed, 09 Jun 2021 14:00:29 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/microsoft-iothub-api/</guid><description>Microsoft IoTHub API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io IoTHub GDR Creation The iothubgdr endpoint allows to import all devices from selected Azure IoT Hub into RKVST.
Define the iothubgdr parameters and store in /path/to/jsonfile:
{ &amp;#34;display_name&amp;#34;: &amp;#34;Jitsuin&amp;#34;, &amp;#34;secret&amp;#34;: &amp;#34;Endpoint=sb://iothub-ns-test-org-1-1637462-0dd952fad8.servicebus.windows.net/;SharedAccessKeyName=iothubowner;SharedAccessKey=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;EntityPath=test-org-1&amp;#34;, &amp;#34;arc_home_location_identity&amp;#34;: &amp;#34;locations/47b575c0-ff0f-11e9-8f0b-362b9e155667&amp;#34; } And post to the endpoint:
curl -v -X POST \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ -H &amp;#34;Content-type: application/json&amp;#34; \ -d &amp;#34;@/path/to/jsonfile&amp;#34; \ $URL/archivist/v2/iothubgdr You should see the following responses:</description></item><item><title>Service Bus API</title><link>https://docs.jitsuin.com/docs/api-reference/svc-buses-api/</link><pubDate>Wed, 09 Jun 2021 14:22:12 +0100</pubDate><guid>https://docs.jitsuin.com/docs/api-reference/svc-buses-api/</guid><description>Service Bus API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Set the URL (for example):
export URL=https://app.rkvst.io Service Bus Sources Creation The svcbussources endpoint allows subscribing to an Azure Service Bus Queue and receiving events when a device changes state.
The state changes are then recorded in the RKVST system.
Warning: The connection string used is for the servicebus and not for the servicebus queue.</description></item></channel></rss>