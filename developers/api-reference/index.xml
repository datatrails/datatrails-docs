<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API Reference on</title><link>https://docs.rkvst.com/developers/api-reference/</link><description>Recent content in API Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Wed, 09 Jun 2021 10:19:37 +0100</lastBuildDate><atom:link href="https://docs.rkvst.com/developers/api-reference/index.xml" rel="self" type="application/rss+xml"/><item><title>App Registrations API</title><link>https://docs.rkvst.com/developers/api-reference/app-registrations-api/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/app-registrations-api/</guid><description>App Registrations API Examples The App Registrations API enables you to create and manage application identities with access to your RKVST Tenancy.
It supports the OpenID Connect Client Credentials Flow, which means that for each application you register, a CLIENT_ID and SECRET are generated and returned.
These credentials are then used to request an access token from https://app.rkvst.io/archivist/iam/v1/appidp/token, which is used for API authentication to RKVST.
Each App Registration is created with Non-Administrator privileges by default.</description></item><item><title>Assets API</title><link>https://docs.rkvst.com/developers/api-reference/assets-api/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/assets-api/</guid><description>For more information on Assets and Asset creation, visit our Core Concepts and Creating an Asset guide. Asset API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Asset Record Creation Define the asset parameters and store in /path/to/jsonfile:
{ &amp;#34;attributes&amp;#34;: { &amp;#34;picture_from_yesterday&amp;#34;: { &amp;#34;arc_attribute_type&amp;#34;: &amp;#34;arc_attachment&amp;#34;, &amp;#34;arc_blob_hash_value&amp;#34;: &amp;#34;01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b&amp;#34;, &amp;#34;arc_blob_identity&amp;#34;: &amp;#34;blobs/1754b920-cf20-4d7e-9d36-9ed7d479744d&amp;#34;, &amp;#34;arc_blob_hash_alg&amp;#34;: &amp;#34;SHA256&amp;#34;, &amp;#34;arc_file_name&amp;#34;: &amp;#34;somepic.jpeg&amp;#34;, &amp;#34;arc_display_name&amp;#34;: &amp;#34;Picture from yesterday&amp;#34;, }, &amp;#34;arc_firmware_version&amp;#34;: &amp;#34;3.2.1&amp;#34;, &amp;#34;arc_home_location_identity&amp;#34;: &amp;#34;locations/42054f10-9952-4c10-a082-9fd0d10295ae&amp;#34; }, &amp;#34;behaviours&amp;#34;: [ &amp;#34;RecordEvidence&amp;#34; ], &amp;#34;proof_mechanism&amp;#34;: &amp;#34;SIMPLE_HASH&amp;#34;, &amp;#34;public&amp;#34;: false } Create the Asset:</description></item><item><title>Attachments API</title><link>https://docs.rkvst.com/developers/api-reference/attachments-api/</link><pubDate>Wed, 09 Jun 2021 12:05:02 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/attachments-api/</guid><description>Attachment API Examples The Attachments API enables you to query Binary Large OBjects (BLOBs) such as documents, process artifacts and images that are attached to your evidence ledger. For details of how to actually attach these BLOBs to Events and Assets, see the the Events API Reference.
Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Retrieve a Specific Attachment on an Asset curl -v \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ https://app.</description></item><item><title>Blobs API</title><link>https://docs.rkvst.com/developers/api-reference/blobs-api/</link><pubDate>Wed, 09 Jun 2021 13:32:57 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/blobs-api/</guid><description>Blob API Examples The Blobs API enables you to upload Binary Large OBjects (BLOBs) such as documents, process artifacts and images to attach to your evidence ledger.
Note: Blobs cannot be searched or listed as a collection in their own right: they must always be associated with an Asset or Event through an Attachment Attribute and can only be downloaded by users with appropriate access rights to that Attachment. For information on Attachments and how to implement them, please refer to the Events API Reference.</description></item><item><title>Blockchain API (v1alpha2)</title><link>https://docs.rkvst.com/developers/api-reference/blockchain-api/</link><pubDate>Wed, 09 Jun 2021 13:57:04 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/blockchain-api/</guid><description>Blockchain API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Fetch Transactions for an event (v1alpha2) Blockchain transactions can be fetched from the blockchain endpoint using the Asset&amp;rsquo;s Event ID as a parameter:
assets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000 To fetch all transactions for an Asset&amp;rsquo;s Events GET the blockchain resource:
curl -v -X GET \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ https://app.rkvst.io/archivist/v1alpha2/blockchain/assets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b3 Depending on the type of proof mechanism used, the response will be:</description></item><item><title>Compliance API</title><link>https://docs.rkvst.com/developers/api-reference/compliance-api/</link><pubDate>Wed, 09 Jun 2021 12:07:13 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/compliance-api/</guid><description>Compliance API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Types of Compliance Policies Compliance posture is measured against user-defined rule sets called Compliance Policies.
Compliance Policies are created once and then Assets can be tested against them at any point in time.
For instance, a policy might state that “Maintenance Alarm Events must be addressed with a Maintenance Report Event recorded in 72 hours”.</description></item><item><title>Events API</title><link>https://docs.rkvst.com/developers/api-reference/events-api/</link><pubDate>Wed, 09 Jun 2021 11:48:40 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/events-api/</guid><description>Events API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Event Creation Define the Event parameters and store in /path/to/jsonfile:
{ &amp;#34;operation&amp;#34;: &amp;#34;Record&amp;#34;, &amp;#34;behaviour&amp;#34;: &amp;#34;RecordEvidence&amp;#34;, &amp;#34;event_attributes&amp;#34;: { &amp;#34;arc_display_type&amp;#34;: &amp;#34;Safety Conformance&amp;#34;, &amp;#34;Safety Rating&amp;#34;: &amp;#34;90&amp;#34;, &amp;#34;inspector&amp;#34;: &amp;#34;spacetime&amp;#34; }, &amp;#34;timestamp_declared&amp;#34;: &amp;#34;2019-11-27T14:44:19Z&amp;#34;, &amp;#34;principal_declared&amp;#34;: { &amp;#34;issuer&amp;#34;: &amp;#34;idp.synsation.io/1234&amp;#34;, &amp;#34;subject&amp;#34;: &amp;#34;phil.b&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;phil.b@synsation.io&amp;#34; } } Note: RecordEvidence is the primary, default behaviour for creating Events. Add the request to the Asset record by POSTing it to the resource:</description></item><item><title>IAM Policies API</title><link>https://docs.rkvst.com/developers/api-reference/iam-policies-api/</link><pubDate>Wed, 09 Jun 2021 12:02:15 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/iam-policies-api/</guid><description>IAM Policies API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
An ABAC policy is used to share permissions with Non-Administrators within your Tenancy. A Non-Administrator could be a user who has been added using the Invites API or could be an App Registration used for client credentials, which are created as Non-Root by default.
To create an ABAC Policy, you should use the user_attributes keyword.</description></item><item><title>IAM Subjects API</title><link>https://docs.rkvst.com/developers/api-reference/iam-subjects-api/</link><pubDate>Wed, 09 Jun 2021 12:02:15 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/iam-subjects-api/</guid><description>IAM Subjects API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
IAM Subjects Creation Define the Subject parameters and store in /path/to/jsonfile:
{ &amp;#34;display_name&amp;#34;: &amp;#34;Some description&amp;#34;, &amp;#34;wallet_pub_key&amp;#34;: [&amp;#34;key1&amp;#34;], &amp;#34;tessera_pub_key&amp;#34;: [&amp;#34;key2&amp;#34;] } Create the IAM Subject:
curl -v -X POST \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ -H &amp;#34;Content-type: application/json&amp;#34; \ -d &amp;#34;@/path/to/jsonfile&amp;#34; \ https://app.rkvst.io/archivist/iam/v1/subjects The response is:
{ &amp;#34;identity&amp;#34;: &amp;#34;subjects/3f5be24f-fd1b-40e2-af35-ec7c14c74d53&amp;#34;, &amp;#34;display_name&amp;#34;: &amp;#34;Some description&amp;#34;, &amp;#34;wallet_pub_key&amp;#34;: [&amp;#34;key1&amp;#34;], &amp;#34;wallet_address&amp;#34;: [&amp;#34;address&amp;#34;], &amp;#34;tessera_pub_key&amp;#34;: [&amp;#34;key2&amp;#34;] } IAM Subjects Retrieval IAM Subject records in RKVST are tokenized at creation time and referred to in all API calls and smart contracts throughout the system by a unique identity of the form:</description></item><item><title>Invites API</title><link>https://docs.rkvst.com/developers/api-reference/invites-api/</link><pubDate>Wed, 09 Jun 2021 11:56:23 +0100</pubDate><guid>https://docs.rkvst.com/developers/api-reference/invites-api/</guid><description>Invites API Examples Invites can be used to invite a new user into a Tenancy to access Assets and Events.
For example, inviting a new member of the organization into their organization&amp;rsquo;s tenancy.
By default, invited users will have no permissons and need to be given access to manage specific Assets and Events using ABAC policies defined by an Administrator.
For sharing Assets and Events to other organizations and tenancies externally, check out our tutorial on OBAC policies or the IAM Policies API Reference.</description></item></channel></rss>