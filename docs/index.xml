<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on</title><link>https://docs.rkvst.com/docs/</link><description>Recent content in Docs on</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://docs.rkvst.com/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Compliance Policies</title><link>https://docs.rkvst.com/docs/beyond-the-basics/compliance-policies/</link><pubDate>Tue, 18 May 2021 14:52:25 +0100</pubDate><guid>https://docs.rkvst.com/docs/beyond-the-basics/compliance-policies/</guid><description>Creating a Compliance Policy Compliance policies are user-defined rule sets that Assets can be tested against. Compliance policies only need to be created once; all applicable Assets will be tested against that policy thereafter.
For example, a policy might assert that “Maintenance Alarm Events must be addressed by a Maintenance Report Event, recorded within 72 hours of the alarm”. This creates a Compliance Policy in the system which any Asset can be tested against as needed.</description></item><item><title>Public Attestation</title><link>https://docs.rkvst.com/docs/beyond-the-basics/public-attestation/</link><pubDate>Tue, 18 May 2021 14:52:25 +0100</pubDate><guid>https://docs.rkvst.com/docs/beyond-the-basics/public-attestation/</guid><description>You may wish to attest information to the general public, without the need for viewers to log-in to their RKVST account. Public Assets can be used to publicly assert data, also referred to as Public Attestation. For example, you may attest to data containing a vulnerability report against an OpenSource software package or the maintenance records for a building.
Permissioned Assets can only be shared through the creation of Access Policies.</description></item><item><title>Verified Domain</title><link>https://docs.rkvst.com/docs/beyond-the-basics/verified-domain/</link><pubDate>Tue, 18 May 2021 14:52:25 +0100</pubDate><guid>https://docs.rkvst.com/docs/beyond-the-basics/verified-domain/</guid><description>What is domain verification? Domain verification assures that actors claiming to be part of an organization are authorized to share information on their behalf. If an organization&amp;rsquo;s tenancy has been verified by the RKVST team, a badge indicating that they have been verified will appear next to their domain name.
Note: Having a verified domain is different from a Tenant Display Name. Tenant display names are internal, appearing only within your own tenancy, and are not visible to anyone you share with.</description></item><item><title>Verifying Assets and Events with Simple Hash</title><link>https://docs.rkvst.com/docs/beyond-the-basics/verifying-with-simple-hash/</link><pubDate>Tue, 18 May 2021 14:52:25 +0100</pubDate><guid>https://docs.rkvst.com/docs/beyond-the-basics/verifying-with-simple-hash/</guid><description>Verifying your Simple Hash events provides an additional layer of assurance to your data, so you can ensure the information you have at a given time has not changed.
To verify your data, you may use the RKVST Simple Hash tool, available on GitHub.
Please note that with Simple Hash, events are committed to the RKVST blockchain as a batch. Events with the blue tick have been committed to the blockchain as part of a batch, and will have a Transaction ID.</description></item><item><title>YAML Runner Components</title><link>https://docs.rkvst.com/docs/yaml-reference/story-runner-components/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/docs/yaml-reference/story-runner-components/</guid><description>Note: To use the YAML Runner you will need to install the rkvst-archivist python package.
Click here for installation instructions.
Key Value action Required for every operation, the action specifies what function will be performed. description Optional string that describes what the step is doing. For example, &amp;ldquo;Create the Asset My First Container&amp;rdquo;. asset_label For a series of steps run as one file, the asset label could be a friendly name used by later steps to refer back to an asset created in a previous step.</description></item><item><title>Assets YAML Runner</title><link>https://docs.rkvst.com/docs/yaml-reference/assets/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/docs/yaml-reference/assets/</guid><description>Note: To use the YAML Runner you will need to install the rkvst-archivist python package.
Click here for installation instructions.
Assets Create Adding an asset_label allows your asset to be referenced in later steps of the story. For example, if you want to add a compliance policy for the asset after it is created.
The arc_namespace (for the asset) and the namespace (for the location) are used to distinguish between assets and locations created between runs of the story.</description></item><item><title>Events YAML Runner</title><link>https://docs.rkvst.com/docs/yaml-reference/events/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/docs/yaml-reference/events/</guid><description>Note: To use the YAML Runner you will need to install the rkvst-archivist python package.
Click here for installation instructions.
Events Create The asset_label must match the setting when the asset was created in an earlier step. The asset_label may also be specified as the Asset ID of an existing asset, in the form assets/&amp;lt;asset-id&amp;gt;.
There are a few optional settings that can be used when creating events. attachments uploads the attachment to RKVST and the response is added to the event before posting.</description></item><item><title>Locations YAML Runner</title><link>https://docs.rkvst.com/docs/yaml-reference/locations/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/docs/yaml-reference/locations/</guid><description>Note: To use the YAML Runner you will need to install the rkvst-archivist python package.
Click here for installation instructions.
Locations Create If Not Exists This action checks to see if the location you are looking to create already exists, and if not, executes the creation of your new location. The action checks for a location with the same identifier to verify that the location does not already exist.</description></item><item><title>Subjects YAML Runner</title><link>https://docs.rkvst.com/docs/yaml-reference/subjects/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/docs/yaml-reference/subjects/</guid><description>Note: To use the YAML Runner you will need to install the rkvst-archivist python package.
Click here for installation instructions.
Subjects Create This action creates a subject using their wallet_pub_key and tessera_pub_key. Adding a subject_label allows the subject to be referenced in later YAML Runner steps.
--- steps: - step: action: SUBJECTS_CREATE description: Create a subjects entity. print_response: true subject_label: A subject display_name: A subject wallet_pub_key: - wallet_pub_key1 tessera_pub_key: - tessera_pub_key2 Subjects Create From base64 This action creates a subject using their base64 subject_string.</description></item><item><title>Compliance Policies YAML Runner</title><link>https://docs.rkvst.com/docs/yaml-reference/compliance/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/docs/yaml-reference/compliance/</guid><description>Note: To use the YAML Runner you will need to install the rkvst-archivist python package.
Click here for installation instructions.
Compliance Policies Create This action creates a compliance policy that assets may be tested against.
The specific fields required for creating compliance policies vary depending on the type of policy being used. Please see the Compliance Policies section for details regarding compliance policy types and YAML Runner examples of each.</description></item></channel></rss>