<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Api Reference on</title><link>https://docs.rkvst.com/docs/api-reference/</link><description>Recent content in Api Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Wed, 09 Jun 2021 10:19:37 +0100</lastBuildDate><atom:link href="https://docs.rkvst.com/docs/api-reference/index.xml" rel="self" type="application/rss+xml"/><item><title>App Registrations API</title><link>https://docs.rkvst.com/docs/api-reference/app-registrations-api/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/app-registrations-api/</guid><description>App Registrations API Examples The App Registrations API enables you to create and manage application identities with access to your RKVST tenant.
It supports the OpenID Connect Client Credentials Flow, which means that for each application you register, a CLIENT_ID and SECRET are generated and returned.
These can be used to request an access token from https://app.rkvst.io/archivist/iam/v1/appidp/token, used for application authentication to RKVST.
Creating an Application Create a JSON file with the parameters of your new application.</description></item><item><title>Assets API</title><link>https://docs.rkvst.com/docs/api-reference/assets-api/</link><pubDate>Wed, 09 Jun 2021 11:39:03 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/assets-api/</guid><description>Asset API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Asset Record Creation Define the asset parameters and store in /path/to/jsonfile:
{ &amp;#34;behaviours&amp;#34;: [&amp;#34;RecordEvidence&amp;#34;, &amp;#34;Attachments&amp;#34;], &amp;#34;attributes&amp;#34;: { &amp;#34;arc_firmware_version&amp;#34;: &amp;#34;1.0&amp;#34;, &amp;#34;arc_serial_number&amp;#34;: &amp;#34;vtl-x4-07&amp;#34;, &amp;#34;arc_display_name&amp;#34;: &amp;#34;tcl.ppj.003&amp;#34;, &amp;#34;arc_description&amp;#34;: &amp;#34;Traffic flow control light at A603 North East&amp;#34;, &amp;#34;arc_home_location_identity&amp;#34;: &amp;#34;locations/115340cf-f39e-4d43-a2ee-8017d672c6c6&amp;#34;, &amp;#34;arc_display_type&amp;#34;: &amp;#34;Traffic light with violation camera&amp;#34;, &amp;#34;some_custom_attribute&amp;#34;: &amp;#34;value&amp;#34;, &amp;#34;arc_attachments&amp;#34;: [ { &amp;#34;arc_display_name&amp;#34;: &amp;#34;arc_primary_image&amp;#34;, &amp;#34;arc_attachment_identity&amp;#34;: &amp;#34;blobs/87b1a84c-1c6f-442b-923e-a97516f4d275&amp;#34;, &amp;#34;arc_hash_alg&amp;#34;: &amp;#34;SHA256&amp;#34;, &amp;#34;arc_hash_value&amp;#34;: &amp;#34;246c316e2cd6971ce5c83a3e61f9880fa6e2f14ae2976ee03500eb282fd03a60&amp;#34; } ] } } Create the asset:</description></item><item><title>Attachments API</title><link>https://docs.rkvst.com/docs/api-reference/attachments-api/</link><pubDate>Wed, 09 Jun 2021 12:05:02 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/attachments-api/</guid><description>Attachment API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Retrieve a Specific Attachment on an Asset curl -v \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ https://app.rkvst.io/archivist/v2/attachments/assets/c04d5ecf-02e0-4be2-a014-ffbbf0e8ddeb/08838336-c357-460d-902a-3aba9528dd22 Retrieve a Specific Attachment on an Event curl -v \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ https://app.rkvst.io/archivist/v2/attachments/assets/c04d5ecf-02e0-4be2-a014-ffbbf0e8ddeb/events/de834094-f6c3-4e38-9b37-8c61dea312c9/08838336-c357-460d-902a-3aba9528dd22 Retrieve Information about a specific Attachment It’s also possible to retrieve information about specific attachment using this API.
To do that simply issue request as above with a suffix /info</description></item><item><title>Blobs API</title><link>https://docs.rkvst.com/docs/api-reference/blobs-api/</link><pubDate>Wed, 09 Jun 2021 13:32:57 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/blobs-api/</guid><description>Blob API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Upload a Blob Upload the blob stored at /path/to/file:
curl -v -X POST \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ -H &amp;#34;content_type=image/jpg&amp;#34; \ -F &amp;#34;file=@/path/to/file&amp;#34; \ https://app.rkvst.io/archivist/v1/blobs The response is:
{ &amp;#34;identity&amp;#34;: &amp;#34;blobs/08838336-c357-460d-902a-3aba9528dd22&amp;#34;, &amp;#34;hash&amp;#34;: { &amp;#34;alg&amp;#34;: &amp;#34;SHA256&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;xxxxxxxxxxxxxxxxxxxxxxx&amp;#34; }, &amp;#34;mime_type&amp;#34;: &amp;#34;image/jpeg&amp;#34;, &amp;#34;timestamp_accepted&amp;#34;: &amp;#34;2019-11-07T15:31:49Z&amp;#34;, &amp;#34;size&amp;#34;: 31424 } Retrieve a Blob Retrieve a specific Attachment</description></item><item><title>Blockchain API (v1alpha1)</title><link>https://docs.rkvst.com/docs/api-reference/blockchain-api/</link><pubDate>Wed, 09 Jun 2021 13:57:04 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/blockchain-api/</guid><description>Blockchain API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Fetch Transactions for an event (v1alpha1) Blockchain transactions can be fetched from the blockchain endpoint using the asset&amp;rsquo;s Event ID as a parameter:
assets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b37-e0b8-42e0-8dcf-dc8c4aefc000 To fetch all transactions for an asset event GET the blockchain resource:
curl -v -X GET \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ https://app.rkvst.io/archivist/v1alpha1/blockchain/assets/add30235-1424-4fda-840a-d5ef82c4c96f/events/11bf5b3 Each of these calls returns a list of matching blockchain transactions in the form:</description></item><item><title>Compliance API</title><link>https://docs.rkvst.com/docs/api-reference/compliance-api/</link><pubDate>Wed, 09 Jun 2021 12:07:13 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/compliance-api/</guid><description>Compliance API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Types of Compliance Policies Compliance Posture is measured against user-defined rule sets called Compliance Policies.
Compliance policies are created once and then Assets can be tested against them at any point in time.
For instance, a policy might state that “Maintenance Alarm Events must be answered with a Maintenance Report Event recorded in 72 hours”.</description></item><item><title>Events API</title><link>https://docs.rkvst.com/docs/api-reference/events-api/</link><pubDate>Wed, 09 Jun 2021 11:48:40 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/events-api/</guid><description>Events API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
Event Creation Define the event parameters and store in /path/to/jsonfile:
{ &amp;#34;operation&amp;#34;: &amp;#34;Record&amp;#34;, &amp;#34;behaviour&amp;#34;: &amp;#34;RecordEvidence&amp;#34;, &amp;#34;event_attributes&amp;#34;: { &amp;#34;arc_display_type&amp;#34;: &amp;#34;Safety Conformance&amp;#34;, &amp;#34;Safety Rating&amp;#34;: &amp;#34;90&amp;#34;, &amp;#34;inspector&amp;#34;: &amp;#34;spacetime&amp;#34; }, &amp;#34;timestamp_declared&amp;#34;: &amp;#34;2019-11-27T14:44:19Z&amp;#34;, &amp;#34;principal_declared&amp;#34;: { &amp;#34;issuer&amp;#34;: &amp;#34;idp.synsation.io/1234&amp;#34;, &amp;#34;subject&amp;#34;: &amp;#34;phil.b&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;phil.b@synsation.io&amp;#34; } } Note: RecordEvidence is the primary, default behaviour for creating Events. Add the request to the Asset Record by POSTing it to the resource:</description></item><item><title>IAM Policies API</title><link>https://docs.rkvst.com/docs/api-reference/iam-policies-api/</link><pubDate>Wed, 09 Jun 2021 12:02:15 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/iam-policies-api/</guid><description>IAM Policies API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
IAM Policy Creation Define the access_policies parameters and store in /path/to/jsonfile:
{ &amp;#34;display_name&amp;#34;: &amp;#34;Friendly name of the policy&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Description of the policy&amp;#34;, &amp;#34;filters&amp;#34;: [ { &amp;#34;or&amp;#34;: [ &amp;#34;attributes.arc_home_location_identity=locations/5ea815f0-4de1-4a84-9377-701e880fe8ae&amp;#34;, &amp;#34;attributes.arc_home_location_identity=locations/27eed70b-9e2b-4db1-b8c4-e36505350dcc&amp;#34; ]}, { &amp;#34;or&amp;#34;: [ &amp;#34;attributes.arc_display_type=Valve&amp;#34;, &amp;#34;attributes.arc_display_type=Pump&amp;#34; ]}, { &amp;#34;or&amp;#34;: [ &amp;#34;attributes.ext_vendor_name=SynsationIndustries&amp;#34; ]} ], &amp;#34;access_permissions&amp;#34;: [ { &amp;#34;asset_attributes_read&amp;#34;: [ &amp;#34;toner_colour&amp;#34;, &amp;#34;toner_type&amp;#34; ], &amp;#34;asset_attributes_write&amp;#34;:[&amp;#34;toner_colour&amp;#34;], &amp;#34;behaviours&amp;#34;: [ &amp;#34;Attachments&amp;#34;, &amp;#34;Firmware&amp;#34;, &amp;#34;Maintenance&amp;#34;, &amp;#34;RecordEvidence&amp;#34; ], &amp;#34;event_arc_display_type_read&amp;#34;: [&amp;#34;toner_type&amp;#34;, &amp;#34;toner_colour&amp;#34;], &amp;#34;event_arc_display_type_write&amp;#34;: [&amp;#34;toner_replacement&amp;#34;], &amp;#34;include_attributes&amp;#34;: [ &amp;#34;arc_display_name&amp;#34;, &amp;#34;arc_display_type&amp;#34;, &amp;#34;arc_firmware_version&amp;#34; ], &amp;#34;subjects&amp;#34;: [ &amp;#34;subjects/6a951b62-0a26-4c22-a886-1082297b063b&amp;#34;, &amp;#34;subjects/a24306e5-dc06-41ba-a7d6-2b6b3e1df48d&amp;#34; ], &amp;#34;user_attributes&amp;#34;: [ {&amp;#34;or&amp;#34;: [&amp;#34;group:maintainers&amp;#34;, &amp;#34;group:supervisors&amp;#34;]} ] } ] } Create the access policy:</description></item><item><title>IAM Subjects API</title><link>https://docs.rkvst.com/docs/api-reference/iam-subjects-api/</link><pubDate>Wed, 09 Jun 2021 12:02:15 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/iam-subjects-api/</guid><description>IAM Subjects API Examples Create the bearer_token and store in a file in a secure local directory with 0600 permissions.
IAM Subjects Creation Define the subjects parameters and store in /path/to/jsonfile:
{ &amp;#34;display_name&amp;#34;: &amp;#34;Some description&amp;#34;, &amp;#34;wallet_pub_key&amp;#34;: [&amp;#34;key1&amp;#34;], &amp;#34;tessera_pub_key&amp;#34;: [&amp;#34;key2&amp;#34;] } Create the IAM subject:
curl -v -X POST \ -H &amp;#34;@$BEARER_TOKEN_FILE&amp;#34; \ -H &amp;#34;Content-type: application/json&amp;#34; \ -d &amp;#34;@/path/to/jsonfile&amp;#34; \ https://app.rkvst.io/archivist/iam/v1/subjects The response is:
{ &amp;#34;identity&amp;#34;: &amp;#34;subjects/3f5be24f-fd1b-40e2-af35-ec7c14c74d53&amp;#34;, &amp;#34;display_name&amp;#34;: &amp;#34;Some description&amp;#34;, &amp;#34;wallet_pub_key&amp;#34;: [&amp;#34;key1&amp;#34;], &amp;#34;wallet_address&amp;#34;: [&amp;#34;address&amp;#34;], &amp;#34;tessera_pub_key&amp;#34;: [&amp;#34;key2&amp;#34;] } IAM Subjects Retrieval IAM subject records in RKVST are tokenized at creation time and referred to in all API calls and smart contracts throughout the system by a unique identity of the form:</description></item><item><title>Invites API</title><link>https://docs.rkvst.com/docs/api-reference/invites-api/</link><pubDate>Wed, 09 Jun 2021 11:56:23 +0100</pubDate><guid>https://docs.rkvst.com/docs/api-reference/invites-api/</guid><description>Invites API Examples Invites can be used to invite a new user into a tenancy to access assets and events.
For example, inviting a new member of the organization into their organization&amp;rsquo;s tenancy.
By default invited users will have no permissons, so need to be given access to manage specific assets and events using ABAC policies defined by a Root User.
For sharing assets and events to other organizations and tenancies externally check out our tutorial on OBAC policies or the IAM Policies API Reference.</description></item></channel></rss>